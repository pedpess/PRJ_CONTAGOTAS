package com.contagotas.contagotas.data.DAO;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.contagotas.contagotas.data.DAO.DetalheGastos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DETALHE_GASTOS.
*/
public class DetalheGastosDao extends AbstractDao<DetalheGastos, Long> {

    public static final String TABLENAME = "DETALHE_GASTOS";

    /**
     * Properties of entity DetalheGastos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Media_gastos_id = new Property(1, Long.class, "media_gastos_id", false, "MEDIA_GASTOS_ID");
        public final static Property Maquina = new Property(2, Integer.class, "maquina", false, "MAQUINA");
        public final static Property Tanque = new Property(3, Integer.class, "tanque", false, "TANQUE");
        public final static Property Privada = new Property(4, Integer.class, "privada", false, "PRIVADA");
        public final static Property Torneira = new Property(5, Integer.class, "torneira", false, "TORNEIRA");
        public final static Property Chuveiro = new Property(6, Integer.class, "chuveiro", false, "CHUVEIRO");
        public final static Property Pia = new Property(7, Integer.class, "pia", false, "PIA");
        public final static Property Lava_louca = new Property(8, Integer.class, "lava_louca", false, "LAVA_LOUCA");
        public final static Property Deleted = new Property(9, String.class, "deleted", false, "DELETED");
    };

    private DaoSession daoSession;


    public DetalheGastosDao(DaoConfig config) {
        super(config);
    }
    
    public DetalheGastosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETALHE_GASTOS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEDIA_GASTOS_ID' INTEGER," + // 1: media_gastos_id
                "'MAQUINA' INTEGER," + // 2: maquina
                "'TANQUE' INTEGER," + // 3: tanque
                "'PRIVADA' INTEGER," + // 4: privada
                "'TORNEIRA' INTEGER," + // 5: torneira
                "'CHUVEIRO' INTEGER," + // 6: chuveiro
                "'PIA' INTEGER," + // 7: pia
                "'LAVA_LOUCA' INTEGER," + // 8: lava_louca
                "'DELETED' TEXT);"); // 9: deleted
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DETALHE_GASTOS__id ON DETALHE_GASTOS" +
                " (_id);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETALHE_GASTOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetalheGastos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long media_gastos_id = entity.getMedia_gastos_id();
        if (media_gastos_id != null) {
            stmt.bindLong(2, media_gastos_id);
        }
 
        Integer maquina = entity.getMaquina();
        if (maquina != null) {
            stmt.bindLong(3, maquina);
        }
 
        Integer tanque = entity.getTanque();
        if (tanque != null) {
            stmt.bindLong(4, tanque);
        }
 
        Integer privada = entity.getPrivada();
        if (privada != null) {
            stmt.bindLong(5, privada);
        }
 
        Integer torneira = entity.getTorneira();
        if (torneira != null) {
            stmt.bindLong(6, torneira);
        }
 
        Integer chuveiro = entity.getChuveiro();
        if (chuveiro != null) {
            stmt.bindLong(7, chuveiro);
        }
 
        Integer pia = entity.getPia();
        if (pia != null) {
            stmt.bindLong(8, pia);
        }
 
        Integer lava_louca = entity.getLava_louca();
        if (lava_louca != null) {
            stmt.bindLong(9, lava_louca);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(10, deleted);
        }
    }

    @Override
    protected void attachEntity(DetalheGastos entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DetalheGastos readEntity(Cursor cursor, int offset) {
        DetalheGastos entity = new DetalheGastos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // media_gastos_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // maquina
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tanque
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // privada
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // torneira
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // chuveiro
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // pia
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lava_louca
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetalheGastos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMedia_gastos_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMaquina(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTanque(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrivada(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTorneira(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setChuveiro(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPia(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLava_louca(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDeleted(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DetalheGastos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DetalheGastos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMediaGastosDao().getAllColumns());
            builder.append(" FROM DETALHE_GASTOS T");
            builder.append(" LEFT JOIN MEDIA_GASTOS T0 ON T.'MEDIA_GASTOS_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DetalheGastos loadCurrentDeep(Cursor cursor, boolean lock) {
        DetalheGastos entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MediaGastos mediaGastos = loadCurrentOther(daoSession.getMediaGastosDao(), cursor, offset);
        entity.setMediaGastos(mediaGastos);

        return entity;    
    }

    public DetalheGastos loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DetalheGastos> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DetalheGastos> list = new ArrayList<DetalheGastos>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DetalheGastos> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DetalheGastos> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
